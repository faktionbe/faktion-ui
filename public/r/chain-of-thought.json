{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chain-of-thought",
  "type": "registry:component",
  "title": "Chain of Thought",
  "description": "A chain of thought component",
  "dependencies": [
    "@radix-ui/react-use-controllable-state",
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "collapsible"
  ],
  "files": [
    {
      "path": "registry/components/chain-of-thought.tsx",
      "content": "'use client';\n\nimport type { ComponentProps, FC } from 'react';\nimport { createContext, useContext } from 'react';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport {\n  BrainIcon,\n  ChevronDownIcon,\n  DotIcon,\n  type LucideIcon,\n} from 'lucide-react';\n\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible';\nimport { cn } from '@/lib/utils';\n\ninterface ChainOfThoughtContextValue {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}\n\nconst ChainOfThoughtContext = createContext<ChainOfThoughtContextValue | null>(\n  null\n);\n\nconst useChainOfThought = () => {\n  const context = useContext(ChainOfThoughtContext);\n  if (!context) {\n    throw new Error(\n      'useChainOfThought must be used within the ChainOfThought component'\n    );\n  }\n  return context;\n};\n\nexport type ChainOfThoughtProps = ComponentProps<'div'> & {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\nconst ChainOfThought: FC<ChainOfThoughtProps> = ({\n  className,\n  open,\n  defaultOpen = false,\n  onOpenChange,\n  children,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useControllableState({\n    prop: open,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <ChainOfThoughtContext.Provider value={{ isOpen, setIsOpen }}>\n      <div\n        className={cn('not-prose max-w-prose space-y-4', className)}\n        {...props}>\n        {children}\n      </div>\n    </ChainOfThoughtContext.Provider>\n  );\n};\n\nexport type ChainOfThoughtHeaderProps = ComponentProps<\n  typeof CollapsibleTrigger\n>;\n\nconst ChainOfThoughtHeader: FC<ChainOfThoughtHeaderProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const { isOpen, setIsOpen } = useChainOfThought();\n\n  return (\n    <Collapsible\n      onOpenChange={setIsOpen}\n      open={isOpen}>\n      <CollapsibleTrigger\n        className={cn(\n          'flex w-full items-center gap-2 text-muted-foreground text-sm transition-colors hover:text-foreground',\n          className\n        )}\n        {...props}>\n        <BrainIcon className='size-4' />\n        <span className='flex-1 text-left'>\n          {children ?? 'Chain of Thought'}\n        </span>\n        <ChevronDownIcon\n          className={cn(\n            'size-4 transition-transform',\n            isOpen ? 'rotate-180' : 'rotate-0'\n          )}\n        />\n      </CollapsibleTrigger>\n    </Collapsible>\n  );\n};\n\nexport type ChainOfThoughtStepProps = ComponentProps<'div'> & {\n  icon?: LucideIcon;\n  label: string;\n  description?: string;\n  status?: 'complete' | 'active' | 'pending';\n};\n\nconst ChainOfThoughtStep: FC<ChainOfThoughtStepProps> = ({\n  className,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  icon: Icon = DotIcon,\n  label,\n  description,\n  status = 'complete',\n  children,\n  ...props\n}) => {\n  const statusStyles = {\n    complete: 'text-muted-foreground',\n    active: 'text-foreground',\n    pending: 'text-muted-foreground/50',\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex gap-2 text-sm',\n        statusStyles[status],\n        'fade-in-0 slide-in-from-top-2 animate-in',\n        className\n      )}\n      {...props}>\n      <div className='relative mt-0.5'>\n        <Icon className='size-4' />\n        <div className='-mx-px absolute top-7 bottom-0 left-1/2 w-px bg-border' />\n      </div>\n      <div className='flex-1 space-y-2'>\n        <span>{label}</span>\n        {description && (\n          <span className='text-muted-foreground text-xs'>{description}</span>\n        )}\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport type ChainOfThoughtSearchResultsProps = ComponentProps<'div'>;\n\nconst ChainOfThoughtSearchResults: FC<ChainOfThoughtSearchResultsProps> = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn('flex items-center gap-2', className)}\n    {...props}\n  />\n);\n\nexport type ChainOfThoughtSearchResultProps = ComponentProps<typeof Badge>;\n\nconst ChainOfThoughtSearchResult: FC<ChainOfThoughtSearchResultProps> = ({\n  className,\n  children,\n  ...props\n}) => (\n  <Badge\n    className={cn('gap-1 px-2 py-0.5 font-normal text-xs', className)}\n    variant='secondary'\n    {...props}>\n    {children}\n  </Badge>\n);\n\nexport type ChainOfThoughtContentProps = ComponentProps<\n  typeof CollapsibleContent\n>;\n\nconst ChainOfThoughtContent: FC<ChainOfThoughtContentProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const { isOpen } = useChainOfThought();\n\n  return (\n    <Collapsible open={isOpen}>\n      <CollapsibleContent\n        className={cn(\n          'mt-2 space-y-3',\n          'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in',\n          className\n        )}\n        {...props}>\n        {children}\n      </CollapsibleContent>\n    </Collapsible>\n  );\n};\n\nexport type ChainOfThoughtImageProps = ComponentProps<'div'> & {\n  caption?: string;\n};\n\nconst ChainOfThoughtImage: FC<ChainOfThoughtImageProps> = ({\n  className,\n  children,\n  caption,\n  ...props\n}) => (\n  <div\n    className={cn('mt-2 space-y-2', className)}\n    {...props}>\n    <div className='relative flex max-h-[22rem] items-center justify-center overflow-hidden rounded-lg bg-muted p-3'>\n      {children}\n    </div>\n    {caption && <p className='text-muted-foreground text-xs'>{caption}</p>}\n  </div>\n);\n\nChainOfThought.displayName = 'ChainOfThought';\nChainOfThoughtHeader.displayName = 'ChainOfThoughtHeader';\nChainOfThoughtStep.displayName = 'ChainOfThoughtStep';\nChainOfThoughtSearchResults.displayName = 'ChainOfThoughtSearchResults';\nChainOfThoughtSearchResult.displayName = 'ChainOfThoughtSearchResult';\nChainOfThoughtContent.displayName = 'ChainOfThoughtContent';\nChainOfThoughtImage.displayName = 'ChainOfThoughtImage';\n\ninterface ChainOfThoughtComposition {\n  Header: typeof ChainOfThoughtHeader;\n  Step: typeof ChainOfThoughtStep;\n  SearchResults: typeof ChainOfThoughtSearchResults;\n  SearchResult: typeof ChainOfThoughtSearchResult;\n  Content: typeof ChainOfThoughtContent;\n  Image: typeof ChainOfThoughtImage;\n}\n\nconst RootWithComposition: ChainOfThoughtComposition & typeof ChainOfThought =\n  Object.assign(ChainOfThought, {\n    Header: ChainOfThoughtHeader,\n    Step: ChainOfThoughtStep,\n    SearchResults: ChainOfThoughtSearchResults,\n    SearchResult: ChainOfThoughtSearchResult,\n    Content: ChainOfThoughtContent,\n    Image: ChainOfThoughtImage,\n  });\n\nexport { RootWithComposition as ChainOfThought };\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "chat"
  ]
}