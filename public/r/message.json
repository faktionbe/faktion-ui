{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "message",
  "type": "registry:component",
  "title": "Message",
  "description": "A message component",
  "dependencies": ["ai"],
  "registryDependencies": ["avatar"],
  "files": [
    {
      "path": "registry/components/message.tsx",
      "content": "import type { ComponentProps, FC, HTMLAttributes } from 'react';\nimport type { UIMessage } from 'ai';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\n\nexport type MessageProps = HTMLAttributes<HTMLDivElement> & {\n  from: UIMessage['role'];\n};\n\nconst Message = ({ className, from, ...props }: MessageProps) => (\n  <div\n    className={cn(\n      'group flex w-full items-end justify-end gap-2 py-4',\n      from === 'user' ? 'is-user' : 'is-assistant flex-row-reverse justify-end',\n      '[&>div]:max-w-[80%]',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type MessageContentProps = HTMLAttributes<HTMLDivElement>;\n\nconst MessageContent: FC<MessageContentProps> = ({\n  children,\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      'flex flex-col gap-2 overflow-hidden rounded-lg px-4 py-3 text-foreground text-sm',\n      'group-[.is-user]:bg-primary group-[.is-user]:text-primary-foreground',\n      'group-[.is-assistant]:bg-secondary group-[.is-assistant]:text-foreground',\n      className\n    )}\n    {...props}>\n    <div className='is-user:dark'>{children}</div>\n  </div>\n);\n\nexport type MessageAvatarProps = ComponentProps<typeof Avatar> & {\n  src: string;\n  name?: string;\n};\n\nconst MessageAvatar: FC<MessageAvatarProps> = ({\n  src,\n  name,\n  className,\n  ...props\n}) => (\n  <Avatar\n    className={cn('size-8 ring-1 ring-border', className)}\n    {...props}>\n    <AvatarImage\n      alt=''\n      className='mt-0 mb-0'\n      src={src}\n    />\n    <AvatarFallback>{name?.slice(0, 2) ?? 'ME'}</AvatarFallback>\n  </Avatar>\n);\n\ninterface MessageComposition {\n  Content: typeof MessageContent;\n  Avatar: typeof MessageAvatar;\n}\n\nconst RootWithComposition: MessageComposition & typeof Message = Object.assign(\n  Message,\n  {\n    Content: MessageContent,\n    Avatar: MessageAvatar,\n  }\n);\n\nexport { RootWithComposition as Message };\n",
      "type": "registry:component"
    }
  ],
  "categories": ["chat"]
}
