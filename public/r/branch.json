{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "branch",
  "type": "registry:component",
  "title": "Branch",
  "description": "A branch component",
  "dependencies": ["ai", "lucide-react"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "registry/components/branch.tsx",
      "content": "'use client';\n\nimport type { ComponentProps, FC, HTMLAttributes, ReactElement } from 'react';\nimport { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport type { UIMessage } from 'ai';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface BranchContextType {\n  currentBranch: number;\n  totalBranches: number;\n  goToPrevious: () => void;\n  goToNext: () => void;\n  branches: Array<ReactElement>;\n  setBranches: (branches: Array<ReactElement>) => void;\n}\n\nconst BranchContext = createContext<BranchContextType | null>(null);\n\nconst useBranch = () => {\n  const context = useContext(BranchContext);\n\n  if (!context) {\n    throw new Error('Branch components must be used within Branch');\n  }\n\n  return context;\n};\n\nexport type BranchProps = HTMLAttributes<HTMLDivElement> & {\n  defaultBranch?: number;\n  onBranchChange?: (branchIndex: number) => void;\n};\n\nconst Branch: FC<BranchProps> = ({\n  defaultBranch = 0,\n  onBranchChange,\n  className,\n  ...props\n}) => {\n  const [currentBranch, setCurrentBranch] = useState(defaultBranch);\n  const [branches, setBranches] = useState<Array<ReactElement>>([]);\n\n  const handleBranchChange = (newBranch: number) => {\n    setCurrentBranch(newBranch);\n    onBranchChange?.(newBranch);\n  };\n\n  const goToPrevious = () => {\n    const newBranch =\n      currentBranch > 0 ? currentBranch - 1 : branches.length - 1;\n    handleBranchChange(newBranch);\n  };\n\n  const goToNext = () => {\n    const newBranch =\n      currentBranch < branches.length - 1 ? currentBranch + 1 : 0;\n    handleBranchChange(newBranch);\n  };\n\n  const contextValue: BranchContextType = {\n    currentBranch,\n    totalBranches: branches.length,\n    goToPrevious,\n    goToNext,\n    branches,\n    setBranches,\n  };\n\n  return (\n    <BranchContext.Provider value={contextValue}>\n      <div\n        className={cn('grid w-full gap-2 [&>div]:pb-0', className)}\n        {...props}\n      />\n    </BranchContext.Provider>\n  );\n};\n\nexport type BranchMessagesProps = HTMLAttributes<HTMLDivElement>;\n\nconst BranchMessages: FC<BranchMessagesProps> = ({ children, ...props }) => {\n  const { currentBranch, setBranches, branches } = useBranch();\n  const childrenArray = useMemo(\n    () => (Array.isArray(children) ? children : [children]),\n    [children]\n  );\n\n  // Use useEffect to update branches when they change\n  useEffect(() => {\n    if (branches.length !== childrenArray.length) {\n      setBranches(childrenArray);\n    }\n  }, [childrenArray, branches, setBranches]);\n\n  return childrenArray.map((branch, index) => (\n    <div\n      className={cn(\n        'grid gap-2 overflow-hidden [&>div]:pb-0',\n        index === currentBranch ? 'block' : 'hidden'\n      )}\n      key={branch.key}\n      {...props}>\n      {branch}\n    </div>\n  ));\n};\n\nexport type BranchSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  from: UIMessage['role'];\n};\n\nconst BranchSelector: FC<BranchSelectorProps> = ({\n  className,\n  from,\n  ...props\n}: BranchSelectorProps) => {\n  const { totalBranches } = useBranch();\n\n  // Don't render if there's only one branch\n  if (totalBranches <= 1) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center gap-2 self-end px-10',\n        from === 'assistant' ? 'justify-start' : 'justify-end',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type BranchPreviousProps = ComponentProps<typeof Button>;\n\nconst BranchPrevious: FC<BranchPreviousProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const { goToPrevious, totalBranches } = useBranch();\n\n  return (\n    <Button\n      aria-label='Previous branch'\n      className={cn(\n        'size-7 shrink-0 rounded-full text-muted-foreground transition-colors',\n        'hover:bg-accent hover:text-foreground',\n        'disabled:pointer-events-none disabled:opacity-50',\n        className\n      )}\n      disabled={totalBranches <= 1}\n      onClick={goToPrevious}\n      size='icon'\n      type='button'\n      variant='ghost'\n      {...props}>\n      {children ?? <ChevronLeftIcon size={14} />}\n    </Button>\n  );\n};\n\nexport type BranchNextProps = ComponentProps<typeof Button>;\n\nconst BranchNext: FC<BranchNextProps> = ({ className, children, ...props }) => {\n  const { goToNext, totalBranches } = useBranch();\n\n  return (\n    <Button\n      aria-label='Next branch'\n      className={cn(\n        'size-7 shrink-0 rounded-full text-muted-foreground transition-colors',\n        'hover:bg-accent hover:text-foreground',\n        'disabled:pointer-events-none disabled:opacity-50',\n        className\n      )}\n      disabled={totalBranches <= 1}\n      onClick={goToNext}\n      size='icon'\n      type='button'\n      variant='ghost'\n      {...props}>\n      {children ?? <ChevronRightIcon size={14} />}\n    </Button>\n  );\n};\n\nexport type BranchPageProps = HTMLAttributes<HTMLSpanElement>;\n\nconst BranchPage: FC<BranchPageProps> = ({ className, ...props }) => {\n  const { currentBranch, totalBranches } = useBranch();\n\n  return (\n    <span\n      className={cn(\n        'font-medium text-muted-foreground text-xs tabular-nums',\n        className\n      )}\n      {...props}>\n      {currentBranch + 1} of {totalBranches}\n    </span>\n  );\n};\n\ninterface BranchComposition {\n  Messages: typeof BranchMessages;\n  Selector: typeof BranchSelector;\n  Previous: typeof BranchPrevious;\n  Page: typeof BranchPage;\n  Next: typeof BranchNext;\n}\n\nconst RootWithComposition: BranchComposition & typeof Branch = Object.assign(\n  Branch,\n  {\n    Messages: BranchMessages,\n    Selector: BranchSelector,\n    Previous: BranchPrevious,\n    Page: BranchPage,\n    Next: BranchNext,\n  }\n);\n\nexport { RootWithComposition as Branch };\n",
      "type": "registry:component"
    }
  ],
  "categories": ["chat"]
}
