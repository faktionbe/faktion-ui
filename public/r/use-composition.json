{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-composition",
  "type": "registry:hook",
  "title": "Use Composition",
  "description": "A hook to extract children of a specific type from a composition",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/hooks/use-composition.tsx",
      "content": "import {\n  Children,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  useMemo,\n} from 'react';\n\ntype TypeWithDisplayName = ReactElement & {\n  type: { displayName: string };\n};\n\nconst isElementWithDisplayName = (\n  element: Exclude<ReactNode, boolean | null | undefined>\n): element is TypeWithDisplayName =>\n  isValidElement(element) &&\n  'props' in element &&\n  typeof element.type !== 'string' &&\n  'displayName' in element.type &&\n  typeof element.type.displayName === 'string';\n\n/**\n * A hook to extract children of a specific type from a composition.\n * @example\n * const result = useComposition(\n *   _children,\n *   ChatAvatar.displayName,\n *   ChatMessageTimestamp.displayName\n * );\n * const [children, avatars, timestamps] = result;\n * @param children - The children passed to the component.\n * @param displayNames - The display names of the components to extract.\n * @returns An array of arrays of children of the specified types\n */\nexport function useComposition<T extends string | undefined>(\n  children: ReactNode,\n  ...displayNames: Array<T>\n): [Array<ReactNode>, ...Array<Array<ReactNode>>] {\n  const composition = useMemo(() => {\n    const result: Array<Array<ReactNode>> = [];\n    const elements: Array<{ displayName: string; element: ReactNode }> = [];\n    const invalidChildren: Array<ReactNode> = [];\n\n    for (const child of Children.toArray(children)) {\n      if (\n        isElementWithDisplayName(child) &&\n        displayNames.some((name) => child.type.displayName === name)\n      ) {\n        elements.push({ displayName: child.type.displayName, element: child });\n      } else {\n        invalidChildren.push(child);\n      }\n    }\n\n    for (const displayName of displayNames) {\n      result.push(\n        elements\n          .filter((el) => el.displayName === displayName)\n          // is never async...\n          // eslint-disable-next-line @typescript-eslint/promise-function-async\n          .map((el) => el.element)\n      );\n    }\n    result.splice(0, 0, invalidChildren);\n    return result as [Array<ReactNode>, ...Array<Array<ReactNode>>];\n  }, [children, displayNames]);\n\n  return composition;\n}\n",
      "type": "registry:hook"
    }
  ],
  "categories": [
    "hooks"
  ]
}