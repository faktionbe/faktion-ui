{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reasoning",
  "type": "registry:component",
  "title": "Reasoning",
  "description": "A reasoning component",
  "dependencies": [
    "@radix-ui/react-use-controllable-state",
    "lucide-react"
  ],
  "registryDependencies": [
    "collapsible",
    "@faktion/response"
  ],
  "files": [
    {
      "path": "registry/components/reasoning.tsx",
      "content": "import type { ComponentProps, FC } from 'react';\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { BrainIcon, ChevronDownIcon } from 'lucide-react';\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible';\nimport { cn } from '@/lib/utils';\nimport { Response } from '@/registry/components/response';\n\ninterface ReasoningContextValue {\n  isStreaming: boolean;\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  duration: number;\n}\n\nconst ReasoningContext = createContext<ReasoningContextValue | null>(null);\n\nconst useReasoning = () => {\n  const context = useContext(ReasoningContext);\n  if (!context) {\n    throw new Error('Reasoning components must be used within Reasoning');\n  }\n  return context;\n};\n\nexport type ReasoningProps = ComponentProps<typeof Collapsible> & {\n  isStreaming?: boolean;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  duration?: number;\n};\n\nconst AUTO_CLOSE_DELAY = 1000;\n\nconst Reasoning: FC<ReasoningProps> = ({\n  className,\n  isStreaming = false,\n  open,\n  defaultOpen = false,\n  // TODO: Fix this, no clue why this is needed\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  onOpenChange,\n  duration: durationProp,\n  children,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useControllableState({\n    prop: open,\n    defaultProp: defaultOpen,\n    onChange: (_open) => onOpenChange?.(_open),\n  });\n  const [duration, setDuration] = useControllableState({\n    prop: durationProp,\n    defaultProp: 0,\n  });\n\n  const [hasAutoClosedRef, setHasAutoClosedRef] = useState(false);\n  const [startTime, setStartTime] = useState<number | null>(null);\n\n  // Track duration when streaming starts and ends\n  useEffect(() => {\n    if (isStreaming) {\n      if (startTime === null) {\n        setStartTime(Date.now());\n      }\n    } else if (startTime !== null) {\n      setDuration(Math.round((Date.now() - startTime) / 1000));\n      setStartTime(null);\n    }\n  }, [isStreaming, startTime, setDuration]);\n\n  // Auto-open when streaming starts, auto-close when streaming ends (once only)\n  useEffect(() => {\n    if (isStreaming && !isOpen) {\n      setIsOpen(true);\n    } else if (!isStreaming && isOpen && !defaultOpen && !hasAutoClosedRef) {\n      // Add a small delay before closing to allow user to see the content\n      const timer = setTimeout(() => {\n        setIsOpen(false);\n        setHasAutoClosedRef(true);\n      }, AUTO_CLOSE_DELAY);\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [isStreaming, isOpen, defaultOpen, setIsOpen, hasAutoClosedRef]);\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setIsOpen(newOpen);\n  };\n\n  return (\n    <ReasoningContext.Provider\n      value={{ isStreaming, isOpen, setIsOpen, duration }}>\n      <Collapsible\n        className={cn('not-prose mb-4', className)}\n        onOpenChange={handleOpenChange}\n        open={isOpen}\n        {...props}>\n        {children}\n      </Collapsible>\n    </ReasoningContext.Provider>\n  );\n};\n\nexport type ReasoningTriggerProps = ComponentProps<\n  typeof CollapsibleTrigger\n> & {\n  title?: string;\n};\n\nconst ReasoningTrigger: FC<ReasoningTriggerProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const { isStreaming, isOpen, duration } = useReasoning();\n\n  return (\n    <CollapsibleTrigger\n      className={cn(\n        'flex items-center gap-2 text-muted-foreground text-sm',\n        className\n      )}\n      {...props}>\n      {children ?? (\n        <>\n          <BrainIcon className='size-4' />\n          {isStreaming || duration === 0 ? (\n            <p>Thinking...</p>\n          ) : (\n            <p>Thought for {duration} seconds</p>\n          )}\n          <ChevronDownIcon\n            className={cn(\n              'size-4 text-muted-foreground transition-transform',\n              isOpen ? 'rotate-180' : 'rotate-0'\n            )}\n          />\n        </>\n      )}\n    </CollapsibleTrigger>\n  );\n};\n\nexport type ReasoningContentProps = ComponentProps<\n  typeof CollapsibleContent\n> & {\n  children: string;\n};\n\nconst ReasoningContent: FC<ReasoningContentProps> = ({\n  className,\n  children,\n  ...props\n}) => (\n  <CollapsibleContent\n    className={cn(\n      'mt-4 text-sm',\n      'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground outline-none data-[state=closed]:animate-out data-[state=open]:animate-in',\n      className\n    )}\n    {...props}>\n    <Response className='grid gap-2'>{children}</Response>\n  </CollapsibleContent>\n);\n\ninterface ReasoningComposition {\n  Trigger: typeof ReasoningTrigger;\n  Content: typeof ReasoningContent;\n}\n\nconst RootWithComposition: ReasoningComposition & typeof Reasoning =\n  Object.assign(Reasoning, {\n    Trigger: ReasoningTrigger,\n    Content: ReasoningContent,\n  });\nexport { RootWithComposition as Reasoning };\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "chat"
  ]
}