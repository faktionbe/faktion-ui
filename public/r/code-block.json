{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:component",
  "title": "Code Block",
  "description": "A code block component",
  "dependencies": [
    "react-syntax-highlighter",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/components/code-block.tsx",
      "content": "import type { ComponentProps, HTMLAttributes, ReactNode } from 'react';\nimport { createContext, useContext, useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  oneDark,\n  oneLight,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface CodeBlockContextType {\n  code: string;\n}\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  code: '',\n});\n\nexport type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {\n  code: string;\n  language: string;\n  showLineNumbers?: boolean;\n  children?: ReactNode;\n};\n\nexport const CodeBlock = ({\n  code,\n  language,\n  showLineNumbers = false,\n  className,\n  children,\n  ...props\n}: CodeBlockProps) => (\n  <CodeBlockContext.Provider value={{ code }}>\n    <div\n      className={cn(\n        'relative w-full overflow-hidden rounded-md border bg-background text-foreground',\n        className\n      )}\n      {...props}>\n      <div className='relative'>\n        <SyntaxHighlighter\n          className='overflow-hidden dark:hidden'\n          codeTagProps={{\n            className: 'font-mono text-sm',\n          }}\n          customStyle={{\n            margin: 0,\n            padding: '1rem',\n            fontSize: '0.875rem',\n            background: 'hsl(var(--background))',\n            color: 'hsl(var(--foreground))',\n          }}\n          language={language}\n          lineNumberStyle={{\n            color: 'hsl(var(--muted-foreground))',\n            paddingRight: '1rem',\n            minWidth: '2.5rem',\n          }}\n          showLineNumbers={showLineNumbers}\n          style={oneLight}>\n          {code}\n        </SyntaxHighlighter>\n        <SyntaxHighlighter\n          className='hidden overflow-hidden dark:block'\n          codeTagProps={{\n            className: 'font-mono text-sm',\n          }}\n          customStyle={{\n            margin: 0,\n            padding: '1rem',\n            fontSize: '0.875rem',\n            background: 'hsl(var(--background))',\n            color: 'hsl(var(--foreground))',\n          }}\n          language={language}\n          lineNumberStyle={{\n            color: 'hsl(var(--muted-foreground))',\n            paddingRight: '1rem',\n            minWidth: '2.5rem',\n          }}\n          showLineNumbers={showLineNumbers}\n          style={oneDark}>\n          {code}\n        </SyntaxHighlighter>\n        {children && (\n          <div className='absolute top-2 right-2 flex items-center gap-2'>\n            {children}\n          </div>\n        )}\n      </div>\n    </div>\n  </CodeBlockContext.Provider>\n);\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const CodeBlockCopyButton = ({\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  className,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const { code } = useContext(CodeBlockContext);\n\n  const copyToClipboard = async () => {\n    if (typeof window === 'undefined') {\n      onError?.(new Error('Clipboard API not available'));\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(code);\n      setIsCopied(true);\n      onCopy?.();\n      setTimeout(() => {\n        setIsCopied(false);\n      }, timeout);\n    } catch (error) {\n      onError?.(error as Error);\n    }\n  };\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <Button\n      className={cn('shrink-0', className)}\n      onClick={copyToClipboard}\n      size='icon'\n      variant='ghost'\n      {...props}>\n      {children ?? <Icon size={14} />}\n    </Button>\n  );\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "chat"
  ]
}