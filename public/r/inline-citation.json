{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inline-citation",
  "type": "registry:component",
  "title": "Inline Citation",
  "description": "A inline citation component",
  "dependencies": ["lucide-react"],
  "registryDependencies": ["badge", "carousel", "hover-card"],
  "files": [
    {
      "path": "registry/components/inline-citation.tsx",
      "content": "'use client';\n\nimport {\n  type ComponentProps,\n  createContext,\n  type FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { ArrowLeftIcon, ArrowRightIcon } from 'lucide-react';\n\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Carousel,\n  type CarouselApi,\n  CarouselContent,\n  CarouselItem,\n} from '@/components/ui/carousel';\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/components/ui/hover-card';\nimport { cn } from '@/lib/utils';\n\nexport type InlineCitationProps = ComponentProps<'span'>;\n\nconst InlineCitation: FC<InlineCitationProps> = ({ className, ...props }) => (\n  <span\n    className={cn('group inline items-center gap-1', className)}\n    {...props}\n  />\n);\n\nexport type InlineCitationTextProps = ComponentProps<'span'>;\n\nconst InlineCitationText: FC<InlineCitationTextProps> = ({\n  className,\n  ...props\n}) => (\n  <span\n    className={cn('transition-colors group-hover:bg-accent', className)}\n    {...props}\n  />\n);\n\nexport type InlineCitationCardProps = ComponentProps<typeof HoverCard>;\n\nconst InlineCitationCard: FC<InlineCitationCardProps> = (props) => (\n  <HoverCard\n    closeDelay={0}\n    openDelay={0}\n    {...props}\n  />\n);\n\nexport type InlineCitationCardTriggerProps = ComponentProps<typeof Badge> & {\n  sources: [string, ...Array<string>];\n};\n\nconst InlineCitationCardTrigger: FC<InlineCitationCardTriggerProps> = ({\n  sources,\n  className,\n  ...props\n}) => (\n  <HoverCardTrigger asChild>\n    <Badge\n      className={cn('ml-1 rounded-full', className)}\n      variant='secondary'\n      {...props}>\n      {sources.length ? (\n        <>\n          {new URL(sources[0]).hostname}{' '}\n          {sources.length > 1 && `+${sources.length - 1}`}\n        </>\n      ) : (\n        'unknown'\n      )}\n    </Badge>\n  </HoverCardTrigger>\n);\n\nexport type InlineCitationCardBodyProps = ComponentProps<'div'>;\n\nconst InlineCitationCardBody: FC<InlineCitationCardBodyProps> = ({\n  className,\n  ...props\n}) => (\n  <HoverCardContent\n    className={cn('relative w-80 p-0', className)}\n    {...props}\n  />\n);\n\nconst CarouselApiContext = createContext<CarouselApi | undefined>(undefined);\n\nconst useCarouselApi = () => {\n  const context = useContext(CarouselApiContext);\n  return context;\n};\n\nexport type InlineCitationCarouselProps = ComponentProps<typeof Carousel>;\n\nconst InlineCitationCarousel: FC<InlineCitationCarouselProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const [api, setApi] = useState<CarouselApi>();\n\n  return (\n    <CarouselApiContext.Provider value={api}>\n      <Carousel\n        className={cn('w-full', className)}\n        setApi={setApi}\n        {...props}>\n        {children}\n      </Carousel>\n    </CarouselApiContext.Provider>\n  );\n};\n\nexport type InlineCitationCarouselContentProps = ComponentProps<'div'>;\n\nconst InlineCitationCarouselContent: FC<InlineCitationCarouselContentProps> = (\n  props\n) => <CarouselContent {...props} />;\n\nexport type InlineCitationCarouselItemProps = ComponentProps<'div'>;\n\nconst InlineCitationCarouselItem: FC<InlineCitationCarouselItemProps> = ({\n  className,\n  ...props\n}) => (\n  <CarouselItem\n    className={cn('w-full space-y-2 p-4 pl-8', className)}\n    {...props}\n  />\n);\n\nexport type InlineCitationCarouselHeaderProps = ComponentProps<'div'>;\n\nconst InlineCitationCarouselHeader: FC<InlineCitationCarouselHeaderProps> = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      'flex items-center justify-between gap-2 rounded-t-md bg-secondary p-2',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type InlineCitationCarouselIndexProps = ComponentProps<'div'>;\n\nconst InlineCitationCarouselIndex: FC<InlineCitationCarouselIndexProps> = ({\n  children,\n  className,\n  ...props\n}: InlineCitationCarouselIndexProps) => {\n  const api = useCarouselApi();\n  const [current, setCurrent] = useState(0);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    if (!api) {\n      return;\n    }\n\n    setCount(api.scrollSnapList().length);\n    setCurrent(api.selectedScrollSnap() + 1);\n\n    api.on('select', () => {\n      setCurrent(api.selectedScrollSnap() + 1);\n    });\n  }, [api]);\n\n  return (\n    <div\n      className={cn(\n        'flex flex-1 items-center justify-end px-3 py-1 text-muted-foreground text-xs',\n        className\n      )}\n      {...props}>\n      {children ?? `${current}/${count}`}\n    </div>\n  );\n};\n\nexport type InlineCitationCarouselPrevProps = ComponentProps<'button'>;\n\nconst InlineCitationCarouselPrev: FC<InlineCitationCarouselPrevProps> = ({\n  className,\n  ...props\n}) => {\n  const api = useCarouselApi();\n\n  const handleClick = useCallback(() => {\n    if (api) {\n      api.scrollPrev();\n    }\n  }, [api]);\n\n  return (\n    <button\n      aria-label='Previous'\n      className={cn('shrink-0', className)}\n      onClick={handleClick}\n      type='button'\n      {...props}>\n      <ArrowLeftIcon className='size-4 text-muted-foreground' />\n    </button>\n  );\n};\n\nexport type InlineCitationCarouselNextProps = ComponentProps<'button'>;\n\nconst InlineCitationCarouselNext: FC<InlineCitationCarouselNextProps> = ({\n  className,\n  ...props\n}) => {\n  const api = useCarouselApi();\n\n  const handleClick = useCallback(() => {\n    if (api) {\n      api.scrollNext();\n    }\n  }, [api]);\n\n  return (\n    <button\n      aria-label='Next'\n      className={cn('shrink-0', className)}\n      onClick={handleClick}\n      type='button'\n      {...props}>\n      <ArrowRightIcon className='size-4 text-muted-foreground' />\n    </button>\n  );\n};\n\nexport type InlineCitationSourceProps = ComponentProps<'div'> & {\n  title?: string;\n  url?: string;\n  description?: string;\n};\n\nconst InlineCitationSource: FC<InlineCitationSourceProps> = ({\n  title,\n  url,\n  description,\n  className,\n  children,\n  ...props\n}) => (\n  <div\n    className={cn('space-y-1', className)}\n    {...props}>\n    {title && (\n      <h4 className='truncate font-medium text-sm leading-tight'>{title}</h4>\n    )}\n    {url && (\n      <p className='truncate break-all text-muted-foreground text-xs'>{url}</p>\n    )}\n    {description && (\n      <p className='line-clamp-3 text-muted-foreground text-sm leading-relaxed'>\n        {description}\n      </p>\n    )}\n    {children}\n  </div>\n);\n\nexport type InlineCitationQuoteProps = ComponentProps<'blockquote'>;\n\nconst InlineCitationQuote: FC<InlineCitationQuoteProps> = ({\n  children,\n  className,\n  ...props\n}) => (\n  <blockquote\n    className={cn(\n      'border-muted border-l-2 pl-3 text-muted-foreground text-sm italic',\n      className\n    )}\n    {...props}>\n    {children}\n  </blockquote>\n);\n\ninterface InlineCitationComposition {\n  Text: typeof InlineCitationText;\n  Card: typeof InlineCitationCard;\n  CardTrigger: typeof InlineCitationCardTrigger;\n  CardBody: typeof InlineCitationCardBody;\n  Carousel: typeof InlineCitationCarousel;\n  CarouselContent: typeof InlineCitationCarouselContent;\n  CarouselItem: typeof InlineCitationCarouselItem;\n  CarouselHeader: typeof InlineCitationCarouselHeader;\n  CarouselIndex: typeof InlineCitationCarouselIndex;\n  CarouselPrev: typeof InlineCitationCarouselPrev;\n  CarouselNext: typeof InlineCitationCarouselNext;\n  Source: typeof InlineCitationSource;\n  Quote: typeof InlineCitationQuote;\n}\n\nconst RootWithComposition: InlineCitationComposition & typeof InlineCitation =\n  Object.assign(InlineCitation, {\n    Text: InlineCitationText,\n    Card: InlineCitationCard,\n    CardTrigger: InlineCitationCardTrigger,\n    CardBody: InlineCitationCardBody,\n    Carousel: InlineCitationCarousel,\n    CarouselContent: InlineCitationCarouselContent,\n    CarouselItem: InlineCitationCarouselItem,\n    CarouselHeader: InlineCitationCarouselHeader,\n    CarouselIndex: InlineCitationCarouselIndex,\n    CarouselPrev: InlineCitationCarouselPrev,\n    CarouselNext: InlineCitationCarouselNext,\n    Source: InlineCitationSource,\n    Quote: InlineCitationQuote,\n  });\n\nexport { RootWithComposition as InlineCitation };\n",
      "type": "registry:component"
    }
  ],
  "categories": ["chat"]
}
