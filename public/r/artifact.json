{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "artifact",
  "type": "registry:component",
  "title": "Artifact",
  "description": "A artifact component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/components/artifact.tsx",
      "content": "'use client';\n\nimport type { ComponentProps, FC, HTMLAttributes } from 'react';\nimport { type LucideIcon, XIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\n\nexport type ArtifactProps = HTMLAttributes<HTMLDivElement>;\n\nconst Artifact: FC<ArtifactProps> = ({ className, ...props }) => (\n  <div\n    className={cn(\n      'flex flex-col overflow-hidden rounded-lg border bg-background shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type ArtifactHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nconst ArtifactHeader: FC<ArtifactHeaderProps> = ({ className, ...props }) => (\n  <div\n    className={cn(\n      'flex items-center justify-between border-b bg-muted/50 px-4 py-3',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type ArtifactCloseProps = ComponentProps<typeof Button>;\n\nconst ArtifactClose: FC<ArtifactCloseProps> = ({\n  className,\n  children,\n  size = 'sm',\n  variant = 'ghost',\n  ...props\n}) => (\n  <Button\n    className={cn(\n      'size-8 p-0 text-muted-foreground hover:text-foreground',\n      className\n    )}\n    size={size}\n    type='button'\n    variant={variant}\n    {...props}>\n    {children ?? <XIcon className='size-4' />}\n    <span className='sr-only'>Close</span>\n  </Button>\n);\n\nexport type ArtifactTitleProps = HTMLAttributes<HTMLParagraphElement>;\n\nconst ArtifactTitle: FC<ArtifactTitleProps> = ({ className, ...props }) => (\n  <p\n    className={cn('font-medium text-foreground text-sm', className)}\n    {...props}\n  />\n);\n\nexport type ArtifactDescriptionProps = HTMLAttributes<HTMLParagraphElement>;\n\nconst ArtifactDescription: FC<ArtifactDescriptionProps> = ({\n  className,\n  ...props\n}) => (\n  <p\n    className={cn('text-muted-foreground text-sm', className)}\n    {...props}\n  />\n);\n\nexport type ArtifactActionsProps = HTMLAttributes<HTMLDivElement>;\n\nconst ArtifactActions: FC<ArtifactActionsProps> = ({ className, ...props }) => (\n  <div\n    className={cn('flex items-center gap-1', className)}\n    {...props}\n  />\n);\n\nexport type ArtifactActionProps = ComponentProps<typeof Button> & {\n  tooltip?: string;\n  label?: string;\n  icon?: LucideIcon;\n};\n\nconst ArtifactAction: FC<ArtifactActionProps> = ({\n  tooltip,\n  label,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  icon: Icon,\n  children,\n  className,\n  size = 'sm',\n  variant = 'ghost',\n  ...props\n}) => {\n  const button = (\n    <Button\n      className={cn(\n        'size-8 p-0 text-muted-foreground hover:text-foreground',\n        className\n      )}\n      size={size}\n      type='button'\n      variant={variant}\n      {...props}>\n      {Icon ? <Icon className='size-4' /> : children}\n      <span className='sr-only'>{label ?? tooltip}</span>\n    </Button>\n  );\n\n  if (tooltip) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>{button}</TooltipTrigger>\n          <TooltipContent>\n            <p>{tooltip}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  return button;\n};\n\nexport type ArtifactContentProps = HTMLAttributes<HTMLDivElement>;\n\nconst ArtifactContent: FC<ArtifactContentProps> = ({ className, ...props }) => (\n  <div\n    className={cn('flex-1 overflow-auto p-4', className)}\n    {...props}\n  />\n);\n\ninterface ArtifactComposition {\n  Header: typeof ArtifactHeader;\n  Close: typeof ArtifactClose;\n  Title: typeof ArtifactTitle;\n  Description: typeof ArtifactDescription;\n  Actions: typeof ArtifactActions;\n  Action: typeof ArtifactAction;\n  Content: typeof ArtifactContent;\n}\n\nconst RootWithComposition: ArtifactComposition & typeof Artifact =\n  Object.assign(Artifact, {\n    Header: ArtifactHeader,\n    Close: ArtifactClose,\n    Title: ArtifactTitle,\n    Description: ArtifactDescription,\n    Actions: ArtifactActions,\n    Action: ArtifactAction,\n    Content: ArtifactContent,\n  });\n\nexport { RootWithComposition as Artifact };\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "chat"
  ]
}