{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prompt-input",
  "type": "registry:component",
  "title": "Prompt Input",
  "description": "A prompt input component",
  "dependencies": [
    "ai",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "select",
    "textarea"
  ],
  "files": [
    {
      "path": "registry/components/prompt-input.tsx",
      "content": "import type {\n  ComponentProps,\n  FC,\n  HTMLAttributes,\n  KeyboardEventHandler,\n} from 'react';\nimport { Children } from 'react';\nimport type { ChatStatus } from 'ai';\nimport { Loader2Icon, SendIcon, SquareIcon, XIcon } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\n\nexport type PromptInputProps = HTMLAttributes<HTMLFormElement>;\n\nconst PromptInput: FC<PromptInputProps> = ({ className, ...props }) => (\n  <form\n    className={cn(\n      'w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type PromptInputTextareaProps = ComponentProps<typeof Textarea> & {\n  minHeight?: number;\n  maxHeight?: number;\n};\nconst PromptInputTextarea: FC<PromptInputTextareaProps> = ({\n  onChange,\n  className,\n  placeholder = 'What would you like to know?',\n  ...props\n}) => {\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (event) => {\n    if (event.key === 'Enter') {\n      // Don't submit if IME composition is in progress\n      if (event.nativeEvent.isComposing) {\n        return;\n      }\n\n      if (event.shiftKey) {\n        // Allow newline\n        return;\n      }\n\n      // Submit on Enter (without Shift)\n      event.preventDefault();\n      const form = event.currentTarget.form;\n      if (form) {\n        form.requestSubmit();\n      }\n    }\n  };\n\n  return (\n    <Textarea\n      className={cn(\n        'w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0',\n        'field-sizing-content max-h-[6lh] bg-transparent dark:bg-transparent',\n        'focus-visible:ring-0',\n        className\n      )}\n      name='message'\n      onChange={(event) => {\n        onChange?.(event);\n      }}\n      onKeyDown={handleKeyDown}\n      placeholder={placeholder}\n      {...props}\n    />\n  );\n};\n\nexport type PromptInputToolbarProps = HTMLAttributes<HTMLDivElement>;\nconst PromptInputToolbar: FC<PromptInputToolbarProps> = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn('flex items-center justify-between p-1', className)}\n    {...props}\n  />\n);\n\nexport type PromptInputToolsProps = HTMLAttributes<HTMLDivElement>;\nconst PromptInputTools: FC<PromptInputToolsProps> = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      'flex items-center gap-1',\n      '[&_button:first-child]:rounded-bl-xl',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type PromptInputButtonProps = ComponentProps<typeof Button>;\n\nconst PromptInputButton: FC<PromptInputButtonProps> = ({\n  variant = 'ghost',\n  className,\n  size,\n  ...props\n}) => {\n  const newSize =\n    (size ?? Children.count(props.children) > 1) ? 'default' : 'icon';\n\n  return (\n    <Button\n      className={cn(\n        'shrink-0 gap-1.5 rounded-lg',\n        variant === 'ghost' && 'text-muted-foreground',\n        newSize === 'default' && 'px-3',\n        className\n      )}\n      size={newSize}\n      type='button'\n      variant={variant}\n      {...props}\n    />\n  );\n};\n\nexport type PromptInputSubmitProps = ComponentProps<typeof Button> & {\n  status?: ChatStatus;\n};\n\nconst PromptInputSubmit: FC<PromptInputSubmitProps> = ({\n  className,\n  variant = 'default',\n  size = 'icon',\n  status,\n  children,\n  ...props\n}) => {\n  let Icon = <SendIcon className='size-4' />;\n\n  if (status === 'submitted') {\n    Icon = <Loader2Icon className='size-4 animate-spin' />;\n  } else if (status === 'streaming') {\n    Icon = <SquareIcon className='size-4' />;\n  } else if (status === 'error') {\n    Icon = <XIcon className='size-4' />;\n  }\n\n  return (\n    <Button\n      className={cn('gap-1.5 rounded-lg', className)}\n      size={size}\n      type='submit'\n      variant={variant}\n      {...props}>\n      {children ?? Icon}\n    </Button>\n  );\n};\n\nexport type PromptInputModelSelectProps = ComponentProps<typeof Select>;\n\nconst PromptInputModelSelect: FC<PromptInputModelSelectProps> = (props) => (\n  <Select {...props} />\n);\n\nexport type PromptInputModelSelectTriggerProps = ComponentProps<\n  typeof SelectTrigger\n>;\n\nconst PromptInputModelSelectTrigger: FC<PromptInputModelSelectTriggerProps> = ({\n  className,\n  ...props\n}) => (\n  <SelectTrigger\n    className={cn(\n      'border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors',\n      'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type PromptInputModelSelectContentProps = ComponentProps<\n  typeof SelectContent\n>;\n\nconst PromptInputModelSelectContent: FC<PromptInputModelSelectContentProps> = ({\n  className,\n  ...props\n}) => (\n  <SelectContent\n    className={cn(className)}\n    {...props}\n  />\n);\n\nexport type PromptInputModelSelectItemProps = ComponentProps<typeof SelectItem>;\n\nconst PromptInputModelSelectItem: FC<PromptInputModelSelectItemProps> = ({\n  className,\n  ...props\n}) => (\n  <SelectItem\n    className={cn(className)}\n    {...props}\n  />\n);\n\nexport type PromptInputModelSelectValueProps = ComponentProps<\n  typeof SelectValue\n>;\n\nconst PromptInputModelSelectValue: FC<PromptInputModelSelectValueProps> = ({\n  className,\n  ...props\n}) => (\n  <SelectValue\n    className={cn(className)}\n    {...props}\n  />\n);\n\ninterface PromptInputComposition {\n  Textarea: typeof PromptInputTextarea;\n  Toolbar: typeof PromptInputToolbar;\n  Tools: typeof PromptInputTools;\n  Button: typeof PromptInputButton;\n  Submit: typeof PromptInputSubmit;\n  ModelSelect: typeof PromptInputModelSelect;\n  ModelSelectTrigger: typeof PromptInputModelSelectTrigger;\n  ModelSelectContent: typeof PromptInputModelSelectContent;\n  ModelSelectItem: typeof PromptInputModelSelectItem;\n  ModelSelectValue: typeof PromptInputModelSelectValue;\n}\n\nconst RootWithComposition: PromptInputComposition & typeof PromptInput =\n  Object.assign(PromptInput, {\n    Textarea: PromptInputTextarea,\n    Toolbar: PromptInputToolbar,\n    Tools: PromptInputTools,\n    Button: PromptInputButton,\n    Submit: PromptInputSubmit,\n    ModelSelect: PromptInputModelSelect,\n    ModelSelectTrigger: PromptInputModelSelectTrigger,\n    ModelSelectContent: PromptInputModelSelectContent,\n    ModelSelectItem: PromptInputModelSelectItem,\n    ModelSelectValue: PromptInputModelSelectValue,\n  });\n\nexport { RootWithComposition as PromptInput };\n",
      "type": "registry:component"
    }
  ]
}